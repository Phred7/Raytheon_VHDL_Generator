###############################
# CCS Disassembler
# For Raytheon Research Project
# Dr. Clem Izurieta
# Dr. Brock LaMeres
# Written by Walker Ward
###############################
import logging
import os
from logging import Logger

logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
logger: Logger = logging.getLogger(__name__)

def main() -> None:
    """
    Generates assembly for a binary generated by the MSP430 in CCS.
    - Checks that the input file exists.
    - Checks if the output file already exists. If so removes it.
    - Runs dis430.exe on the input file and output file.
    - Checks the exit status of the dis430.exe.
    - Note: Extremely dependant on package structure.
    :raise: OSError if the input file does not exists.
    :raise: OSError if the disassembler failed.
    """
    disassembler_directory: str = r'C:\ti\ccs1040\ccs\tools\compiler\ti-cgt-msp430_20.2.5.LTS\bin'
    disassembler_executable: str = r'dis430.exe'
    disassembler_input_file_name: str = "Motor_mover_C.out"
    disassembler_input_file_directory: str = rf"{os.getcwd()}\ccs_workspace\Motor_mover_C\Debug"
    disassembler_output_file_name: str = "generated_disassembly.txt"
    disassembler_output_file_directory: str =rf"{os.getcwd()}\generated_disassembly"

    if not os.path.exists(rf"{disassembler_input_file_directory}\{disassembler_input_file_name}"):
        raise OSError(rf"{disassembler_input_file_directory}\{disassembler_input_file_name} does not exist")

    if os.path.exists(rf"{disassembler_output_file_directory}\{disassembler_output_file_name}"):
        os.remove(rf"{disassembler_output_file_directory}\{disassembler_output_file_name}")
        logger.info(rf"Removed {disassembler_output_file_directory}\{disassembler_output_file_name}")

    disassembler_exit_status: int = os.system(rf"{disassembler_directory}\{disassembler_executable} {disassembler_input_file_directory}\{disassembler_input_file_name} {disassembler_output_file_directory}\{disassembler_output_file_name}")
    logger.debug(f"Disassembler exist status: {disassembler_exit_status}")
    if disassembler_exit_status != 0:
        raise OSError(f"Disassembler failed to generate disassembly for {disassembler_input_file_name} with exit status {disassembler_exit_status}")
    else:
        logger.info(f'Generated {disassembler_output_file_name} at the directory {disassembler_output_file_directory}')


if __name__ == '__main__':
    main()
